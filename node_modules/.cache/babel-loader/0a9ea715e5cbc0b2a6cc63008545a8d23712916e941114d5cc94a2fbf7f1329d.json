{"ast":null,"code":"var _jsxFileName = \"/home/kacper/drop-n-share-frontend/src/pages/Home/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  //Public API that will echo messages sent to it back to the client\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:8000');\n  const [users, setUsers] = useState([]);\n  const {\n    sendMessage,\n    lastMessage,\n    readyState\n  } = useWebSocket(socketUrl);\n  useEffect(() => {\n    if (lastMessage !== null && lastMessage !== void 0 && lastMessage.data) {\n      let usersList = lastMessage.data.split(\"\\n\");\n      const fetchUsernames = async () => {\n        const newUsers = [];\n        for (const user of usersList) {\n          let found = false;\n          for (let i = 0; i < users.length; i++) {\n            if (user === users[i].id) {\n              found = true;\n              break;\n            }\n          }\n          if (!found) {\n            try {\n              const response = await fetch(\"https://usernameapiv1.vercel.app/api/random-usernames\");\n              const data = await response.json();\n              const username = data.usernames[0];\n              newUsers.push({\n                id: user,\n                username: username\n              });\n            } catch (error) {\n              console.error(\"Error fetching username:\", error);\n            }\n          }\n        }\n\n        // After all users have been processed, update state\n        setUsers(prevUsers => [...prevUsers, ...newUsers]);\n\n        // Now filter out any users whose 'id' doesn't exist in the 'usersList'\n        setUsers(prevUsers => {\n          const filteredUsers = prevUsers.filter(user => usersList.includes(user.id));\n          return filteredUsers;\n        });\n      };\n      fetchUsernames();\n    }\n  }, [lastMessage]);\n  const handleClickSendMessage = useCallback(() => sendMessage('Hello'), []);\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated'\n  }[readyState];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"The WebSocket is currently \", connectionStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), lastMessage ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Last message: \", lastMessage.data]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 22\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"sChh+xj+7SjualJkMkecKXjuZxY=\", false, function () {\n  return [useWebSocket];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useWebSocket","ReadyState","jsxDEV","_jsxDEV","App","_s","socketUrl","setSocketUrl","users","setUsers","sendMessage","lastMessage","readyState","data","usersList","split","fetchUsernames","newUsers","user","found","i","length","id","response","fetch","json","username","usernames","push","error","console","prevUsers","filteredUsers","filter","includes","handleClickSendMessage","connectionStatus","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/kacper/drop-n-share-frontend/src/pages/Home/App.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\n\nconst App = () => {\n  //Public API that will echo messages sent to it back to the client\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:8000');\n  const [users, setUsers] = useState([])\n\n  const { sendMessage, lastMessage, readyState } = useWebSocket(socketUrl);\n\n  useEffect(() => {\n    if (lastMessage?.data) {\n      let usersList = lastMessage.data.split(\"\\n\");\n  \n      const fetchUsernames = async () => {\n        const newUsers = [];\n        for (const user of usersList) {\n          let found = false;\n  \n          for (let i = 0; i < users.length; i++) {\n            if (user === users[i].id) {\n              found = true;\n              break;\n            }\n          }\n  \n          if (!found) {\n            try {\n              const response = await fetch(\"https://usernameapiv1.vercel.app/api/random-usernames\");\n              const data = await response.json();\n              const username = data.usernames[0];\n  \n              newUsers.push({ id: user, username: username });\n            } catch (error) {\n              console.error(\"Error fetching username:\", error);\n            }\n          }\n        }\n  \n        // After all users have been processed, update state\n        setUsers((prevUsers) => [\n          ...prevUsers,\n          ...newUsers,\n        ]);\n  \n        // Now filter out any users whose 'id' doesn't exist in the 'usersList'\n        setUsers((prevUsers) => {\n          const filteredUsers = prevUsers.filter(user => usersList.includes(user.id));\n          return filteredUsers;\n        });\n      };\n  \n      fetchUsernames();\n    }\n  }, [lastMessage]);\n  \n  const handleClickSendMessage = useCallback(() => sendMessage('Hello'), []);\n\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n  }[readyState];\n\n  return (\n    <div>\n      {/* <button\n        onClick={handleClickSendMessage}\n        disabled={readyState !== ReadyState.OPEN}\n      >\n        Click Me to send 'Hello'\n      </button> */}\n      <span>The WebSocket is currently {connectionStatus}</span>\n      {lastMessage ? <span>Last message: {lastMessage.data}</span> : null}\n      <ul>\n      </ul>\n    </div>\n  );\n};\n\nexport default App"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}